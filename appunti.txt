CONCEPT PLAYER-EDITOR:
* Il player avrà un foglio CSS opportuno. Tutti gli elementi del player hanno nomi standard come: "class='AnswerField' id='Quest1Activity1AnswerField'" e via dicendo. Oppure per il caso dei ligi si può utilizzare la notazione gerarchica di CSS (#Quest0 > #Activity0 per esempio)
* ESEMPIO DI STRUTTURA - con i nomi delle classi:
    * Quest
        * Activity
            * ActivityParagraph
            * AnswerField
        * Activity ...
    
* COSA DOVREBBE VEDERE IL GIOCATORE:

____________________________________
|                                   |
|            NOME STORIA            |
|___________________________________|
|                                   |
|            NOME QUEST             |
|___________________________________|
|                                   |
|        testo, immagini, ecc.      |
|                                   |
.                                   .
.                                   .
.                                   .
|                                   |
| CAMPO RISPOSTA DI FINE ATTIVITA'  |
|___________________________________|

APPUNTO IMPORTANTE PER window.close() --> https://stackoverflow.com/questions/19761241/window-close-and-self-close-do-not-close-the-window-in-chrome

BUG E PROBLEMI DA CORREGGERE
* EDITOR
    * sistemare le frecce delle gallery
    * fare in modo che si possa non inserire la descrizione dell'answer field
    * aggiungere al titolo della storia la classe StoryTitle
    * Rendere più veloci le animazioni
    * Doppio click sulle card - si potrebbe inserire un breve periodo di prevenzione click
    * Cambiare la modalità di slide delle gallery se usare lo stesso id per vari elementi non va bene
* TUTTO
    * controllare compatibilità con schermi piccoli

RIASSUNTO DELLE COSE DA FARE:
* EDITOR
    * Navbar: save, close, change mode, graphic e preview
    * Interfacciamento col server (EDIT, SERVER e gestione di partite in parallelo)
        * Idealmente dovrebbero esistere tre identificatori per ogni storia:
            * Nome del file json - utilizzato dall'utente per distinguere ogni documento
            * ID numerico - legato al nome del file, ma l'utente non vi interagisce
            * Titolo della storia - parametro del json, indipendente dal resto
        * Nella parte di EDIT devono esserci due opzioni:
            * Modifica storia
            * Crea copia - serve per la faccenda delle squadre parallele
        * Nella pubblicazione mettere un ciclo che controlla se sia presente la risposta giusta nel caso non sia spuntata ASK_EVAL, che non ci siano attività o quest vuote, che non vi siano attività che hanno outcomes non definiti, che siano prsenti tutte le "alt" nel caso di una partita accessibile
    * Grafica
    * Accessibilità
* PLAYER
    * Grafica
    * Interfacciamento col server

DETTAGLI SULLE COSE DA FARE:
* EDITOR
    * Controllare la faccenda della traduzione di apici e quotes
    * Aggiungere una guida all'editor css. Scrivere che esistono i container attività e quest - spiegare come modificare gli elementi (soprattutto i figli di attività e quest). Mettere l'elenco delle classi modificabili e avvertire dell'esistenza dei container Quest, Activity e ActivityText
    * Completare l'astrazione del file system (creare un file css automaticamente ogni volta che si crea una nuova storia)
* approfondire la differenza tra attr e prop





appunti:
* get() --> utilizzato per la query
* res --> parametro per la risposta da restituire al client
* al caricamento della pagina del player viene aggiunto nell'head un template per il json
* la sintassi $(function()) è uno shortcut per window.onload
* per avviare un app in Node basta fare node app.js dal cmd
* link utili per accessibilità:
    * https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/
    * https://www.w3.org/1999/xhtml/vocab#XHTMLRoleVocabulary
    * https://webaim.org/techniques/aria/#rules
* margin per elementi div: https://stackoverflow.com/questions/35817096/css-margin-0-auto-not-centering
* leggere files con javascript:
    * https://web.dev/read-files/#select-input
    * https://www.youtube.com/watch?v=VElnT8EoEEM