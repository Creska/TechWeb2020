CONCEPT PLAYER-EDITOR:
* Il player avrà un foglio CSS opportuno. Tutti gli elementi del player hanno nomi standard come: "class='AnswerField' id='Quest1Activity1AnswerField'" e via dicendo. Oppure per il caso dei ligi si può utilizzare la notazione gerarchica di CSS (#Quest0 > #Activity0 per esempio)
* ESEMPIO DI STRUTTURA - con i nomi delle classi:
    * Quest
        * Activity
            * ActivityParagraph
            * AnswerField
        * Activity ...
    
* COSA DOVREBBE VEDERE IL GIOCATORE:

____________________________________
|                                   |
|            NOME STORIA            |
|___________________________________|
|                                   |
|            NOME QUEST             |
|___________________________________|
|                                   |
|        testo, immagini, ecc.      |
|                                   |
.                                   .
.                                   .
.                                   .
|                                   |
| CAMPO RISPOSTA DI FINE ATTIVITA'  |
|___________________________________|




ROBA DA FARE:
* GENERALE
    * Approfondire la faccenda del metodo click() in aggiunta all'attributo onclick
    * Capire la differenza tra attr() e prop()
* EDITOR
    * Aggiornare il pdf
    * Aggiungere la parte dei settings. Specifiche:
        * Vi sono due tipi di input:
            * Checkbox
            * Numero (l'autore specifica un range)
* PLAYER
    * Aggiungere la parte di incremento punteggio nel player (usare callback per valutazione umana)





appunti:
* get() --> utilizzato per la query
* res --> parametro per la risposta da restituire al client
* al caricamento della pagina del player viene aggiunto nell'head un template per il json
* la sintassi $(function()) è uno shortcut per window.onload
* per avviare un app in Node basta fare node app.js dal cmd