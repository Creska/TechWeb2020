CONCEPT PLAYER-EDITOR:
* Il player avrà un foglio CSS opportuno. Tutti gli elementi del player hanno nomi standard come: "class='AnswerField' id='Quest1Activity1AnswerField'" e via dicendo. Oppure per il caso dei ligi si può utilizzare la notazione gerarchica di CSS (#Quest0 > #Activity0 per esempio)
* ESEMPIO DI STRUTTURA - con i nomi delle classi:
    * Quest
        * Activity
            * ActivityParagraph
            * AnswerField
        * Activity ...
    
* COSA DOVREBBE VEDERE IL GIOCATORE:

____________________________________
|                                   |
|            NOME STORIA            |
|___________________________________|
|                                   |
|            NOME QUEST             |
|___________________________________|
|                                   |
|        testo, immagini, ecc.      |
|                                   |
.                                   .
.                                   .
.                                   .
|                                   |
| CAMPO RISPOSTA DI FINE ATTIVITA'  |
|___________________________________|


ROBA DA FARE IMPORTANTE:
* EDITOR
    * Togliere l'assignID
    * Sistemare la creazione dinamica degli elementi
    * Mettere un alert sul cambio di input dell'AnswerField che segnali attenzione nel cambiare idea
    * Usare cssstylesheet.insertrule() per aggiungere regole vuote al css - sempre che funzioni
    * Aggiungere una guida all'editor css. Scrivere che esistono i container attività e quest - spiegare come modificare gli elementi (soprattutto i figli di attività e quest)
    * Completare l'astrazione del file system (creare un file css automaticamente ogni volta che si crea una nuova storia)
* EDITOR E PLAYER
    * Nell'answer outcome inserire la chiamata alla funzione per incrementare il punteggio, nel caso la risposta sia giusta
    * Creare una nuova funzione per fare un reloading dell'attività nel player (nel caso la risposta sbagliata causi la ripetizione della suddetta attività)
* PLAYER
    * Aggiungere la funzione di controllo sulla scadenza del tempo
    * Creare un oggetto che contenga questi parametri:
        * tempo passato da partenza attività a risposta inviata
        * numero di volte per cui è usata la chat durante la medesima attività
        * sezione in cui si trova
* AGGIUNGERE LA ROBA DI ACCESSIBILITA'
* approfondire la differenza tra attr e prop



appunti:
* get() --> utilizzato per la query
* res --> parametro per la risposta da restituire al client
* al caricamento della pagina del player viene aggiunto nell'head un template per il json
* la sintassi $(function()) è uno shortcut per window.onload
* per avviare un app in Node basta fare node app.js dal cmd