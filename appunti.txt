CONCEPT PLAYER-EDITOR:
* Il player avrà un foglio CSS opportuno. Tutti gli elementi del player hanno nomi standard come: "class='AnswerField' id='Quest1Activity1AnswerField'" e via dicendo. Oppure per il caso dei ligi si può utilizzare la notazione gerarchica di CSS (#Quest0 > #Activity0 per esempio)
* ESEMPIO DI STRUTTURA - con i nomi delle classi:
    * Quest
        * Activity
            * ActivityParagraph
            * AnswerField
        * Activity ...
    
* COSA DOVREBBE VEDERE IL GIOCATORE:

____________________________________
|                                   |
|            NOME STORIA            |
|___________________________________|
|                                   |
|            NOME QUEST             |
|___________________________________|
|                                   |
|        testo, immagini, ecc.      |
|                                   |
.                                   .
.                                   .
.                                   .
|                                   |
| CAMPO RISPOSTA DI FINE ATTIVITA'  |
|___________________________________|

APPUNTO IMPORTANTE PER window.close() --> https://stackoverflow.com/questions/19761241/window-close-and-self-close-do-not-close-the-window-in-chrome

BUG E PROBLEMI DA CORREGGERE
* EDITOR
    * [WIP] Funzionalità di interfacciamento col server [aggiungere creazione dell'id di storia e quest al momento della pubblicazione]
    * [WIP] Funzioni di passaggio per navbar e main menu
    * [WIP] Aggiungere le funzionalità relative a quest_ID
    * Rimuovere funzionalità single device
    * Sistemare le descrizioni in ChooseGameMode
    * Sistemare nomi e tooltips dei settings dell'Answer Field
    * Mettere il nome dell'app
    * Migliorare le spiegazioni
    * Rifare la guida dell'editor CSS
* PLAYER
    * Riprogettare l'interfaccia (ad esempio mettere un header per il campo risposta)
    * [WIP] Completare la raccolta e l'invio delle stats
    * Stilizzare l'alert dell'accessibilità (settando le opportune opzioni di accessibilità)
    * Migliorare la schermata di inizio
* TUTTO
    * controllare compatibilità con schermi piccoli

ACESSIBILITA'
* header: role='heading' aria-level=numero come nel tag

RIASSUNTO DELLE COSE DA FARE:
* EDITOR
    * [WIP] Interfacciamento col server
    * [WIP] Funzionalità di navbar e main menu
    * Accessibilità
* PLAYER
    * [WIP] Grafica
    * Interfacciamento col server
    * Accessibilità



appunti:
* get() --> utilizzato per la query
* res --> parametro per la risposta da restituire al client
* al caricamento della pagina del player viene aggiunto nell'head un template per il json
* la sintassi $(function()) è uno shortcut per window.onload
* per avviare un app in Node basta fare node app.js dal cmd
* link utili per accessibilità:
    * https://developer.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/
    * https://www.w3.org/1999/xhtml/vocab#XHTMLRoleVocabulary
    * https://webaim.org/techniques/aria/#rules
* margin per elementi div: https://stackoverflow.com/questions/35817096/css-margin-0-auto-not-centering
* leggere files con javascript:
    * https://web.dev/read-files/#select-input
    * https://www.youtube.com/watch?v=VElnT8EoEEM
* footer:
    * https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/
    * https://stackoverflow.com/questions/29069498/how-to-make-a-sticky-footer-using-css